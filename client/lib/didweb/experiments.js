import { driver } from "@digitalbazaar/did-method-key";
import { Ed25519VerificationKey2020 } from "@digitalbazaar/ed25519-verification-key-2020";
import { Ed25519Signature2020 } from "@digitalbazaar/ed25519-signature-2020";
import { S } from "../sanctuary/mod.js";
import { id2DID } from "./did.js";
import { deactivate } from "./mod.js";

export const didDocToVC = (ownerDID) => (diddoc) => {
  const diddocLD = diddoc.renderLD();
  return {
    "@context": ["https://www.w3.org/2018/credentials/v1"],
    type: ["VerifiableCredential"],
    id: diddocLD.id,
    credentialSubject: { ...diddocLD },
    issuer: ownerDID,
  };
};

async function useDeactivate() {
  // const keyPair = await Ed25519VerificationKey2020.generate();
  // console.log(keyPair);

  const keyPair = {
    // generated by did-method-key
    id:
      "did:key:z6MkwSo3P2obKCTN6n3gfKC2XbnrJiKtftrzZZbVKgVwkgoZ#z6MkwSo3P2obKCTN6n3gfKC2XbnrJiKtftrzZZbVKgVwkgoZ",
    controller: "did:key:z6MkwSo3P2obKCTN6n3gfKC2XbnrJiKtftrzZZbVKgVwkgoZ",
    // generated by did-method-key END
    revoked: undefined,
    type: "Ed25519VerificationKey2020",
    publicKeyMultibase: "z6MkwSo3P2obKCTN6n3gfKC2XbnrJiKtftrzZZbVKgVwkgoZ",
    privateKeyMultibase:
      "zrv1ZeLYyQSLKav9RWdinNNisSmpMFvLLCC2XyQSzYJ73myqeT1i3VF6SCXYdFrzmQyxieGetSZHYVfvbhLiQyMguVZ",
  };

  const verificationKeyPair = await Ed25519VerificationKey2020.from(keyPair);
  // create did:key
  // console.log("verificationKeyPair", verificationKeyPair);
  // const didKeyDriver = driver();
  // didKeyDriver.use({
  //   multibaseMultikeyHeader: "z6Mk",
  //   fromMultibase: Ed25519VerificationKey2020.from,
  // });
  // const { didDocument, keyPairs, methodFor } = await didKeyDriver.fromKeyPair({
  //   verificationKeyPair,
  // });
  // // console.log(didDocument);
  // // console.log("keyPairs", keyPairs);
  // const assertionKeyPair = methodFor({ purpose: "assertionMethod" });
  // // console.log("assertionKeyPair", assertionKeyPair);
  //
  // // here, I'd integrate with the KMS by passing a signer and verifier function
  // keyPair.id = assertionKeyPair.id;
  // keyPair.controller = assertionKeyPair.controller;
  // verificationKeyPair = await Ed25519VerificationKey2020.from(keyPair);
  // console.log(JSON.stringify(verificationKeyPair));
  const suite = new Ed25519Signature2020({ key: verificationKeyPair });
  // console.log(suite);
  const did = id2DID("localhost:3000")("jceb");
  // console.log(did);

  // TODO continue here with making the credential signable
  return await deactivate(
    keyPair.controller,
    suite,
    did,
  );
}
console.log(await useDeactivate());
